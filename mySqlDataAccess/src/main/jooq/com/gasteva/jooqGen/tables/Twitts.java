/*
 * This file is generated by jOOQ.
*/
package com.gasteva.jooqGen.tables;


import com.gasteva.jooqGen.Keys;
import com.gasteva.jooqGen.Litteltwitter;
import com.gasteva.jooqGen.tables.records.TwittsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Twitts extends TableImpl<TwittsRecord> {

    private static final long serialVersionUID = 1558321874;

    /**
     * The reference instance of <code>litteltwitter.twitts</code>
     */
    public static final Twitts TWITTS = new Twitts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TwittsRecord> getRecordType() {
        return TwittsRecord.class;
    }

    /**
     * The column <code>litteltwitter.twitts.Id</code>.
     */
    public final TableField<TwittsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>litteltwitter.twitts.CreateDate</code>.
     */
    public final TableField<TwittsRecord, Timestamp> CREATEDATE = createField("CreateDate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>litteltwitter.twitts.Text</code>.
     */
    public final TableField<TwittsRecord, String> TEXT = createField("Text", org.jooq.impl.SQLDataType.VARCHAR.length(140), this, "");

    /**
     * The column <code>litteltwitter.twitts.UserId</code>.
     */
    public final TableField<TwittsRecord, Integer> USERID = createField("UserId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>litteltwitter.twitts</code> table reference
     */
    public Twitts() {
        this("twitts", null);
    }

    /**
     * Create an aliased <code>litteltwitter.twitts</code> table reference
     */
    public Twitts(String alias) {
        this(alias, TWITTS);
    }

    private Twitts(String alias, Table<TwittsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Twitts(String alias, Table<TwittsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Litteltwitter.LITTELTWITTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TwittsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TWITTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TwittsRecord> getPrimaryKey() {
        return Keys.KEY_TWITTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TwittsRecord>> getKeys() {
        return Arrays.<UniqueKey<TwittsRecord>>asList(Keys.KEY_TWITTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TwittsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TwittsRecord, ?>>asList(Keys.FK_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Twitts as(String alias) {
        return new Twitts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Twitts rename(String name) {
        return new Twitts(name, null);
    }
}
